#.................................................................................................................
# EUCLID Probe and Z-Compensation settings and support macros
#
# About: This macro bundle contains all the necessary macros to use the Euclid Probe and employ Z Compensation. 
#   The Z Compensation macro (G3201) adjusts the current Z height by comparing a probe reference height to the
#   current probe trigger height. The Z-Endstop is still utilized, but only to yield a reference height to locate
#   the probedock safely. The comparison function performs five probe measurements to get a better idea of the
#   "real" height from which the median results are averaged and then compared to the set reference height defined
#   by euclidZCompensation. The difference is applied to the current Z height by using SET_KINEMATIC_POSITION, once
#   the Z axis is homed the compensation will be discarded. Additionally, compensation will not be applied if
#   euclidZCompensation is set to 0.

#                                  +++ Point location on the Bed +++
#                                  ---------------------------------
#                                  |   Dock             Z         *| Home
#                                  |                               |
#                                  |          BoundingBox          |
#                                  |           ---------           |
#                                  |           | 5   4 |           |
#                                  |           |   1   |           |
#                                  |           | 2   3 |           |
#                                  |           ---------           |
#                                  |                               |
#                                  |                               |
#                                  |                               |
#                                  ---------------------------------
#                                               Front
#
# Setting: To determine a starting euclidZCompensation value, take the following steps. Check nozzle clean and
#   free of debris, same for bed. Set euclidZCompensation to 0 to disable G3201 from applying changes, and restart
#   Klipper. Dial-in your Z height as outlined in the procedures found here: https://docs.vorondesign.com/build/startup/.
#   Once you are satisfied with your Z height, run G3201 from the console. Once completed, review the console output
#   for 'Current Average is:' and place that value as euclidZCompensation. Following a save and restart, perform a
#   first-layer print test, babystep Z until happy, and apply the babystep total to the euclidZCompensation value.
#   Increasing this value will set the nozzle closer to the bed, and vice versa. For example, if you were using a
#   value of 9.4 and wanted a little more 'squish', try 9.44.
#
# ! Note: A safety feature exists that checks the distance between the Z-endstop trigger to the newly calculated
#   0-Point; if this difference is greater than the defined ZprobeAbortTolerance, the compensation will not be applied.
# ! Note: For docking and undocking, the probe movement routines are tailored for the probe cradle affixed to the left
#   side, on the outboard left bed extrusion.
#
#   Thanks to Daniel0815 for testing & assistance on Z compensation and configuration.
#.................................................................................................................
# Required variable(s) to be set. Add the following to your global variable dictionary block as:
#
#[gcode_macro globalvariables]
##------------------------------------------------- EUCLID PROBE -------------------------------------------------- 
#variable_EuclidX: 47                   # X Position directly over probe
#variable_EuclidY: 356.5                # Y Position directly over probe
#variable_EuclidSwipeX: 100             # X Position, swipe to the side to free probe of dock
#variable_EuclidSafeDeployZ: 25         # Z Safe height for deployment approach
#variable_EuclidSafeStowZ: 30           # Z Safe height following stowing the probe (break mag pull)
#variable_EuclidDeployZ: 2.5            # Lower to just above probe, no physical contact
#variable_EuclidStowZ: 2.0              # Lower to exact postion for dock entry/exit
#
##------------------------------------------------ Z COMPENSATION ------------------------------------------------- 
#variable_EuclidZCompensation: 9.44     # Z0 Compensation based off probe height, used in G3201. 0 to disable.
#                                       # G3201 Description and usage below, ~line 110
#
#variable_ProbeBoundingBox: 10          # Bounding box size to take probe samples, this is used for X & Y
#variable_DoApplyMesh: False            # Apply mesh prior to probe sampling for Z Compensation. If set to False, mesh will
                                        # be applied after Z compensation. FALSE is the recommended setting.
#variable_MeshToApply: "HOTMESH"        # The saved mesh to apply, mesh name must be enclosed with "". The bundled HOTMESH
#                                       # macro will save it's results as "HOTMESH"
#                                       # *!* To perform a fresh in-situation mesh calibration, instead of loading a saved
#                                       # mesh, use "INSITU" for MeshToApply. This will be applied before Z Comp probing.
#                                       # *!* To completely skip applying mesh, use "NONE" for MeshToApply
#
#variable_ZprobeSpeed: 5.0              # Probing speed for Z Measurements
#variable_ZprobeSamples: 7              # Samples probed per position, yeilding as calculated median. Keep this number odd
#variable_ZprobeTolerance: 0.050        # Sample Tolerance per Z Point
#variable_ZprobeAbortTolerance: 1.0     # Tolerance to apply the Measured Z-0 Point or throw an error to check things
#variable_ZprobeRetract: 1.5            # Retract from each probing for a D2F-5 1.2 should be good   
#gcode:
#.................................................................................................................
# Required external macro(s) used by this macro set.
#
# ---NONE---
#.................................................................................................................


#.................................................................................................................
# Included macro commands in this bundle
#.................................................................................................................
# G3201 - No additional options / Usage: G3201
#   Homes the toolhead, performs quad gantry leveling, homes Z, and then probes five bed center points. The five
#   probing resultant median values are then averaged and compared to [variable_euclidZCompensation]. If the difference
#   between the probe findings and this variable is within [ZprobeAbortTolerance], then it will applied to the current
#   Z height which is defined as NEW_CURRENT_Z and then set with SET_KINEMATIC_POSITION.
#  *If [variable_euclidZCompensation] is set to 0, compensation will not be applied. Additionally, once
#   the Z-axis is homed, any existing compensation from G3201 will be discarded.
#  -To figure the ZCompensation value, do the following: Check nozzle clean and free of debris, same for bed.
#   Set [variable_euclidZCompensation] to 0 to disable G3201 from applying changes. Then dial-in your Z height as
#   set forth in the procedures found here: https://docs.vorondesign.com/build/startup/. Once you are satisfied with
#   your Z height, run G3201 from console. When it is done, note what it states as 'Current Average is:' - place
#   that yeilded value as [variable_euclidZCompensation]. Perform a first-layer print test and adjust this setting
#   up/down as required. Increasing this value will set the nozzle closer to the bed. For example, if you were using
#   a value of 9.4 and wanted a little more 'squish', try 9.44.
#.................................................................................................................
# G32 - No additional options / Usage: G32
#   Homes the toolhead, performs quad gantry leveling, and homes again.
#.................................................................................................................
# M401 - No additional options / # Usage: M401
#   Attach the Euclid probe to the toolhead.
#.................................................................................................................
# M402 - No additional options / Usage: M402
#   Remove the Euclid probe from the toolhead by placing it in the dock.




#.................................................................................................................
# M401 - Deploy Euclid Probe
[gcode_macro M401]
gcode:
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        G28 Z
        _PROBE_DEPLOY
    {% else %}
        M118 ?!Probe is already attached.
    {% endif %}



#.................................................................................................................
# M402 - Stow Euclid Probe
[gcode_macro M402]
gcode:
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        G28 Z
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}



#.................................................................................................................
[gcode_macro _PROBE_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro globalvariables"].euclidsafedeployz|float} F1000
    G0 X{printer["gcode_macro globalvariables"].euclidx|float} Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
    G0 Z{printer["gcode_macro globalvariables"].eucliddeployz|float} F1000
    G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
    G0 Z{printer["gcode_macro globalvariables"].euclidsafedeployz|float} F1000
    _error_if_probe_not_deployed ; Verify probe attached



#.................................................................................................................
[gcode_macro _PROBE_STOW]
gcode:
    G90
    G0 X{printer["gcode_macro globalvariables"].euclidswipex|float} Y{printer["gcode_macro globalvariables"].euclidy|float} F4000
    G0 Z{printer["gcode_macro globalvariables"].euclidstowz|float} F1000
    G0 X{printer["gcode_macro globalvariables"].euclidx|float} Y{printer["gcode_macro globalvariables"].euclidy|float} F1000
    G0 Z{printer["gcode_macro globalvariables"].euclidsafestowz|float} F1000
    _error_if_probe_deployed ; Verify probe detached



#.................................................................................................................
# Euclid probe safety checks block

[gcode_macro _do_error_if_probe_deployed]
gcode:
    {% if not printer.probe.last_query %}
        {action_raise_error("ERROR: probe still deployed - remove and return to dock.")}
    {% else %}
        M118 Euclid Probe has been stowed.  
    {% endif %}	

[gcode_macro _error_if_probe_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_deployed

[gcode_macro _do_error_if_probe_not_deployed]
gcode:
    {% if printer.probe.last_query %}
        {action_raise_error("ERROR: probe unsuccessfully deployed.")}
    {% else %}
        M118 Euclid Probe has been attached.
    {% endif %}

[gcode_macro _error_if_probe_not_deployed]
gcode:
    G4 P300
    QUERY_PROBE
    _do_error_if_probe_not_deployed
    
    
    
#.................................................................................................................
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    QUAD_GANTRY_LEVEL_ORIGINIAL
    M402



#.................................................................................................................
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_ORIGINIAL
gcode:
    QUERY_PROBE
    M401
    BED_MESH_CALIBRATE_ORIGINIAL
    M402



#.................................................................................................................
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUERY_PROBE
    {% if printer.probe.last_query %}
        M118 Fetching Euclid Probe.
        _PROBE_DEPLOY
    {% endif %}
    QUAD_GANTRY_LEVEL_ORIGINIAL
    G28
    M118 Stowing Euclid Probe.
    _PROBE_STOW
    QUERY_PROBE



#.................................................................................................................
[gcode_macro G3201]
gcode:
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set ZSpeed = printer["gcode_macro globalvariables"].zprobesamples|float %}
    {% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    {% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
    BED_MESH_CLEAR
    G28
        QUERY_PROBE
        {% if printer.probe.last_query %}
            M118 Fetching Euclid Probe.
            _PROBE_DEPLOY
        {% endif %}
        QUAD_GANTRY_LEVEL_ORIGINIAL
        G28 Z
        {% if printer["gcode_macro globalvariables"].doapplymesh|default() == true and MeshToApply != "NONE" %}            
            {% if MeshToApply == "INSITU" %}
                BED_MESH_CALIBRATE_ORIGINIAL
                BED_MESH_PROFILE SAVE=INSITU
              {% else %}
                BED_MESH_PROFILE LOAD={MeshToApply}
            {% endif %}
            M118 Applying {MeshToApply} mesh prior to sampling.
        {% else %}
            M118 Not applying {MeshToApply} mesh prior to sampling.
        {% endif %}
    G90
    G0 X{X_MID} Y{Y_MID} F4000
    G91  
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
    _CHECK_PROBE1

[gcode_macro _CHECK_PROBE1]
gcode:
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    {% set ProbeBB = printer["gcode_macro globalvariables"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{(ProbeBB/2)} Y-{(ProbeBB/2)} F2000
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
    _CHECK_PROBE2 PASS={PROBE_PASS}

[gcode_macro _CHECK_PROBE2]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    {% set ProbeBB = printer["gcode_macro globalvariables"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X{ProbeBB} F2000
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
    _CHECK_PROBE3 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE3]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    {% set ProbeBB = printer["gcode_macro globalvariables"].probeboundingbox|float %}
    G0 Z2 F500
    G0 Y{ProbeBB} F2000
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
    _CHECK_PROBE4 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE4]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    {% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    {% set ProbeBB = printer["gcode_macro globalvariables"].probeboundingbox|float %}
    G0 Z2 F500
    G0 X-{ProbeBB} F2000
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
    _CHECK_PROBE5 PASS={PROBE_PASS + PASS}

[gcode_macro _CHECK_PROBE5]
gcode:
    {% set PASS = params.PASS|float %}
    {% set PROBE_PASS = printer.probe.last_z_result %}
    G90
    G0 Z25 F3500
    _CHECK_PROBE6 PASS={(PROBE_PASS + PASS)/5}

[gcode_macro _CHECK_PROBE6]
gcode:
    {% set ZP_CAL = printer["gcode_macro globalvariables"].euclidzcompensation|float %}
    {% set ZAbortTolerance = printer["gcode_macro globalvariables"].zprobeaborttolerance|float %}
    {% set MeshToApply = printer["gcode_macro globalvariables"].meshtoapply|default() %}
    {% set DoApplyMesh = printer["gcode_macro globalvariables"].doapplymesh|int %}
    {% set PASS = params.PASS|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_OFFSET = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_OFFSET) %}
    M118 Current Average is: {PASS}
    M118 Z-Probe calibration is: {ZP_CAL}
    M118 Offset: {Z_OFFSET}
    {% if Z_OFFSET|abs > ZAbortTolerance %}
        M118 ! ! !  Z-OFFSET is > {ZAbortTolerance}mm, check nozzle cleanliness and printer  ! ! !
        M118 Not applying calculated offset to Z.
      {% else %}
        M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
        SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
        G4 P1000
        M118 Moving nozzle to newly adjusted Z25.
        G0 Z25 F500
        G4 P1000
    {% endif %}
    {% if printer["gcode_macro globalvariables"].doapplymesh|default() == false and MeshToApply != "NONE" %}
        {% if MeshToApply == "INSITU" %}
            BED_MESH_CALIBRATE_ORIGINIAL
            BED_MESH_PROFILE SAVE=INSITU
          {% else %}
            BED_MESH_PROFILE LOAD={MeshToApply}
        {% endif %}
        M118 Applied {MeshToApply} mesh post sampling.
    {% endif %}
    QUERY_PROBE
    {% if not printer.probe.last_query %}
        M118 Stowing Euclid Probe.
        _PROBE_STOW
    {% else %}
        M118 ?!Probe is not attached.
    {% endif %}
